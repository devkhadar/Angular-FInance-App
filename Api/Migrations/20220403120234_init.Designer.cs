// <auto-generated />
using System;
using Finance_Api.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Finance_Api.Migrations
{
    [DbContext(typeof(Fin_dbContext))]
    [Migration("20220403120234_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Finance_Api.Repository.EmiCard", b =>
                {
                    b.Property<long>("EmiCardNumber")
                        .HasColumnName("emiCardNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnName("cardType")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("CreditUsed")
                        .HasColumnName("creditUsed")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("varchar(30)")
                        .HasDefaultValueSql("('UNAPPROVED')")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal>("TotalCredit")
                        .HasColumnName("totalCredit")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnName("validTill")
                        .HasColumnType("date");

                    b.HasKey("EmiCardNumber")
                        .HasName("PK__EmiCard__FE8A004DAF8CD574");

                    b.HasIndex("Email");

                    b.ToTable("EmiCard");
                });

            modelBuilder.Entity("Finance_Api.Repository.LoginAdmin", b =>
                {
                    b.Property<string>("AccPassword")
                        .IsRequired()
                        .HasColumnName("accPassword")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("userName")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.ToTable("LoginAdmin");
                });

            modelBuilder.Entity("Finance_Api.Repository.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("orderId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("EmiTenure")
                        .HasColumnName("emiTenure")
                        .HasColumnType("int");

                    b.Property<int?>("Productid")
                        .HasColumnName("productid")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnName("totalCost")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__0809335D26AE0679");

                    b.HasIndex("Email");

                    b.HasIndex("Productid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Finance_Api.Repository.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("productId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("ProductDetails")
                        .IsRequired()
                        .HasColumnName("productDetails")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("productName")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("ProductId")
                        .HasName("PK__Products__2D10D16AABEB7ADC");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Finance_Api.Repository.UserRegistration", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("AccPassword")
                        .IsRequired()
                        .HasColumnName("accPassword")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal>("AccountNumber")
                        .HasColumnName("accountNumber")
                        .HasColumnType("numeric(20, 0)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnName("bankName")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnName("cardType")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnName("confirmPassword")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("dob")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("fullName")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasColumnName("homeAddress")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("IfscCode")
                        .IsRequired()
                        .HasColumnName("ifscCode")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal>("PhoneNumber")
                        .HasColumnName("phoneNumber")
                        .HasColumnType("numeric(10, 0)");

                    b.Property<string>("UserName")
                        .HasColumnName("userName")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("Email")
                        .HasName("PK__UserRegi__AB6E6165FA71D0E6");

                    b.ToTable("UserRegistration");
                });

            modelBuilder.Entity("Finance_Api.Repository.EmiCard", b =>
                {
                    b.HasOne("Finance_Api.Repository.UserRegistration", "EmailNavigation")
                        .WithMany("EmiCard")
                        .HasForeignKey("Email")
                        .HasConstraintName("FK__EmiCard__email__571DF1D5");
                });

            modelBuilder.Entity("Finance_Api.Repository.Orders", b =>
                {
                    b.HasOne("Finance_Api.Repository.UserRegistration", "EmailNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("Email")
                        .HasConstraintName("FK__Orders__email__4E88ABD4");

                    b.HasOne("Finance_Api.Repository.Products", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK__Orders__producti__4F7CD00D");
                });
#pragma warning restore 612, 618
        }
    }
}
